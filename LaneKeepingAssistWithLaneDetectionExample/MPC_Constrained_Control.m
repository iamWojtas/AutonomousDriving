function u = MPC_Constrained_Control(Phi1,Phi2,F,np,nc,gain,xk,psiPrim,vint)

    w_x = gain(2:6);
    w_x1 = repmat(w_x,1,np);
    W_x = diag(w_x1);
    w_u = gain(7)*ones(nc,1)';
    W_u = diag(w_u);

    % constraints on x1 only require transformation og F, Phi1 and Phi2 m-x
    Phi1n = Phi1(1:length(w_x):end,:);
    Phi2n = Phi2(1:length(w_x):end,:);
    Fn = F(1:length(w_x):end,:);

    % constraints values
    umin = -0.5;
    umax = 0.5;
    dumin = -0.1;
    dumax = 0.1;
    ymin = -0.45;
    ymax = 0.45;
%% Hildreths
    % QP variables
    C1 = ones(nc,1);
    C2 = tril(ones(nc,nc));
    Eo = 2*(Phi1'*W_x*Phi1 + W_u);
%     invEo = inv(Eo);
    Fo = 2*((F*xk)'*W_x*Phi1 + (Phi2*psiPrim)'*W_x*Phi1)';
    Mo = [-eye(nc);...
        eye(nc);...
        -C2;...
        C2;...
        -Phi1n;...
        Phi1n...
        ];
    gamma = [-dumin*ones(nc,1);...
        dumax*ones(nc,1);...
        -umin*ones(nc,1) + C1*xk(end);...
        umax*ones(nc,1) - C1*xk(end);...
        -ymin*ones(np,1) + Fn*xk + Phi2n*psiPrim;...
        ymax*ones(np,1) - Fn*xk - Phi2n*psiPrim...
        ];
    bigNumber = 1000000;
    singleConstraintNc = [1 bigNumber*ones(1,nc-1)]';
    singleConstraintNp = [1 bigNumber*ones(1,np-1)]';
    gammaSingleConstraint = [-dumin*ones(nc,1).*singleConstraintNc;...
        dumax*ones(nc,1).*singleConstraintNc;...
        (-umin*ones(nc,1) + C1*xk(end)).*singleConstraintNc;...
        (umax*ones(nc,1) - C1*xk(end)).*singleConstraintNc;...
        -ymin*ones(np,1) + Fn*xk + Phi2n*psiPrim;...
        ymax*ones(np,1) - Fn*xk - Phi2n*psiPrim...
        ];
%     gammaSingleConstraintAll = [-dumin*ones(nc,1).*singleConstraintNc;...
%     dumax*ones(nc,1).*singleConstraintNc;...
%     (-umin*ones(nc,1) + C1*xk(end)).*singleConstraintNc;...
%     (umax*ones(nc,1) - C1*xk(end)).*singleConstraintNc;...
%     (-ymin*ones(np,1) + Fn*xk + Phi2n*psiPrim).*singleConstraintNp;...
%     (ymax*ones(np,1) - Fn*xk - Phi2n*psiPrim).*singleConstraintNp...
%     ];
    

%% Solving QP with Hildreth
    Du = BookHildreth(Eo,Fo,Mo,gamma,vint);
    du = Du(1,1);
    u = du + xk(end);
    %% NN
%     numbConstr = 3*nc + 2*np;
%     gammann = 10000;
%     bigNumber = 10000;
%     xiM = ones(nc,1)*dumin;
%     xiP = ones(nc,1)*dumax;
% 
%     C1 = ones(nc,1);
%     C2 = tril(ones(nc,nc));
%     Wnn = 2*(Phi1'*W_x*Phi1 + W_u);
%     qnn = 2*((F*xk)'*W_x*Phi1 + (Phi2*psiPrim)'*W_x*Phi1)';
%     Ann = [-C2;...
%         C2;...
%         -Phi1n;...
%         Phi1n...
%         ];
%     bnn = [-umin*ones(nc,1) + C1*xk(end);...
%         umax*ones(nc,1) - C1*xk(end);...
%         -ymin*ones(np,1) + Fn*xk + Phi2n*psiPrim;...
%         ymax*ones(np,1) - Fn*xk - Phi2n*psiPrim...
%         ];
%     Hnn = [Wnn  -Ann'; Ann zeros(length(Ann),length(Ann'))];
%     pnn = [qnn; -bnn]; 
%     zetaP = [xiP; bigNumber*ones(length(Ann),1)];   
%     zetaM = [xiM; bigNumber*zeros(length(Ann),1)];
%     
%     logsss = sim('LVI_PDNN_for_QP','timeout',33);
%     Du = logsss.logsout.getElement('du');
%     du = Du.Values.Data(end);
%     u = du + xk(end);
%     
%% data collection for NN validation
    if vint == 15
        cokolwwiek = 2137;
    end
%% Important program features
    fi_ut = 14.5;
end

